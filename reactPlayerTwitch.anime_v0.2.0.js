"use strict";(self.webpackChunkanime=self.webpackChunkanime||[]).push([["reactPlayerTwitch"],{"./node_modules/twitch-video-element/dist/react.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ react_default)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");\n/* harmony import */ var _twitch_video_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./twitch-video-element.js */ "./node_modules/twitch-video-element/dist/twitch-video-element.js");\n"use client";\n\n// dist/react.ts\n\n\n\n// ../../node_modules/ce-la-react/dist/ce-la-react.js\nvar reservedReactProps = /* @__PURE__ */ new Set([\n  "style",\n  "children",\n  "ref",\n  "key",\n  "suppressContentEditableWarning",\n  "suppressHydrationWarning",\n  "dangerouslySetInnerHTML"\n]);\nvar reactPropToAttrNameMap = {\n  className: "class",\n  htmlFor: "for"\n};\nfunction defaultToAttributeName(propName) {\n  return propName.toLowerCase();\n}\nfunction defaultToAttributeValue(propValue) {\n  if (typeof propValue === "boolean") return propValue ? "" : void 0;\n  if (typeof propValue === "function") return void 0;\n  if (typeof propValue === "object" && propValue !== null) return void 0;\n  return propValue;\n}\nfunction createComponent({\n  react: React2,\n  tagName,\n  elementClass,\n  events,\n  displayName,\n  defaultProps,\n  toAttributeName = defaultToAttributeName,\n  toAttributeValue = defaultToAttributeValue\n}) {\n  const IS_REACT_19_OR_NEWER = Number.parseInt(React2.version) >= 19;\n  const ReactComponent = React2.forwardRef((props, ref) => {\n    var _a, _b;\n    const elementRef = React2.useRef(null);\n    const prevElemPropsRef = React2.useRef(/* @__PURE__ */ new Map());\n    const eventProps = {};\n    const attrs = {};\n    const reactProps = {};\n    const elementProps = {};\n    for (const [k, v] of Object.entries(props)) {\n      if (reservedReactProps.has(k)) {\n        reactProps[k] = v;\n        continue;\n      }\n      const attrName = toAttributeName(reactPropToAttrNameMap[k] ?? k);\n      if (k in elementClass.prototype && !(k in (((_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) ?? {})) && !((_b = elementClass.observedAttributes) == null ? void 0 : _b.some((attr) => attr === attrName))) {\n        elementProps[k] = v;\n        continue;\n      }\n      if (k.startsWith("on")) {\n        eventProps[k] = v;\n        continue;\n      }\n      const attrValue = toAttributeValue(v);\n      if (attrName && attrValue != null) {\n        attrs[attrName] = String(attrValue);\n        if (!IS_REACT_19_OR_NEWER) {\n          reactProps[attrName] = attrValue;\n        }\n      }\n      if (attrName && IS_REACT_19_OR_NEWER) {\n        const attrValueFromDefault = defaultToAttributeValue(v);\n        if (attrValue !== attrValueFromDefault) {\n          reactProps[attrName] = attrValue;\n        } else {\n          reactProps[attrName] = v;\n        }\n      }\n    }\n    if (typeof window !== "undefined") {\n      for (const propName in eventProps) {\n        const callback = eventProps[propName];\n        const useCapture = propName.endsWith("Capture");\n        const eventName = ((events == null ? void 0 : events[propName]) ?? propName.slice(2).toLowerCase()).slice(\n          0,\n          useCapture ? -7 : void 0\n        );\n        React2.useLayoutEffect(() => {\n          const eventTarget = elementRef == null ? void 0 : elementRef.current;\n          if (!eventTarget || typeof callback !== "function") return;\n          eventTarget.addEventListener(eventName, callback, useCapture);\n          return () => {\n            eventTarget.removeEventListener(eventName, callback, useCapture);\n          };\n        }, [elementRef == null ? void 0 : elementRef.current, callback]);\n      }\n      React2.useLayoutEffect(() => {\n        if (elementRef.current === null) return;\n        const newElemProps = /* @__PURE__ */ new Map();\n        for (const key in elementProps) {\n          setProperty(elementRef.current, key, elementProps[key]);\n          prevElemPropsRef.current.delete(key);\n          newElemProps.set(key, elementProps[key]);\n        }\n        for (const [key, _value] of prevElemPropsRef.current) {\n          setProperty(elementRef.current, key, void 0);\n        }\n        prevElemPropsRef.current = newElemProps;\n      });\n    }\n    if (typeof window === "undefined" && (elementClass == null ? void 0 : elementClass.getTemplateHTML) && (elementClass == null ? void 0 : elementClass.shadowRootOptions)) {\n      const { mode, delegatesFocus } = elementClass.shadowRootOptions;\n      const templateShadowRoot = React2.createElement("template", {\n        shadowrootmode: mode,\n        shadowrootdelegatesfocus: delegatesFocus,\n        dangerouslySetInnerHTML: {\n          __html: elementClass.getTemplateHTML(attrs, props)\n        }\n      });\n      reactProps.children = [templateShadowRoot, reactProps.children];\n    }\n    return React2.createElement(tagName, {\n      ...defaultProps,\n      ...reactProps,\n      ref: React2.useCallback(\n        (node) => {\n          elementRef.current = node;\n          if (typeof ref === "function") {\n            ref(node);\n          } else if (ref !== null) {\n            ref.current = node;\n          }\n        },\n        [ref]\n      )\n    });\n  });\n  ReactComponent.displayName = displayName ?? elementClass.name;\n  return ReactComponent;\n}\nfunction setProperty(node, name, value) {\n  var _a;\n  node[name] = value;\n  if (value == null && name in (((_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) ?? {})) {\n    node.removeAttribute(name);\n  }\n}\n\n// dist/react.ts\nvar react_default = createComponent({\n  react: react__WEBPACK_IMPORTED_MODULE_0__,\n  tagName: "twitch-video",\n  elementClass: _twitch_video_element_js__WEBPACK_IMPORTED_MODULE_1__["default"],\n  toAttributeName(propName) {\n    if (propName === "muted") return "";\n    if (propName === "defaultMuted") return "muted";\n    return defaultToAttributeName(propName);\n  }\n});\n\n/*! Bundled license information:\n\nce-la-react/dist/ce-la-react.js:\n  (**\n   * @license\n   * Copyright 2018 Google LLC\n   * SPDX-License-Identifier: BSD-3-Clause\n   *\n   * Modified version of `@lit/react` for vanilla custom elements with support for SSR.\n   *)\n*/\n\n\n//# sourceURL=webpack://anime/./node_modules/twitch-video-element/dist/react.js?\n}')},"./node_modules/twitch-video-element/dist/twitch-video-element.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ twitch_video_element_default)\n/* harmony export */ });\nconst EMBED_BASE = "https://player.twitch.tv";\nconst MATCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/(?:videos?\\/|\\?video=)(\\d+)($|\\?)/;\nconst MATCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nconst PlaybackState = {\n  IDLE: "Idle",\n  READY: "Ready",\n  BUFFERING: "Buffering",\n  PLAYING: "Playing",\n  ENDED: "Ended"\n};\nconst PlayerCommands = {\n  DISABLE_CAPTIONS: 0,\n  ENABLE_CAPTIONS: 1,\n  PAUSE: 2,\n  PLAY: 3,\n  SEEK: 4,\n  SET_CHANNEL: 5,\n  SET_CHANNEL_ID: 6,\n  SET_COLLECTION: 7,\n  SET_QUALITY: 8,\n  SET_VIDEO: 9,\n  SET_MUTED: 10,\n  SET_VOLUME: 11\n};\nfunction getTemplateHTML(attrs, props = {}) {\n  const iframeAttrs = {\n    src: serializeIframeUrl(attrs, props),\n    frameborder: "0",\n    width: "100%",\n    height: "100%",\n    allow: "accelerometer; fullscreen; autoplay; encrypted-media; picture-in-picture;",\n    sandbox: "allow-modals allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox",\n    scrolling: "no"\n  };\n  if (props.config) {\n    iframeAttrs["data-config"] = JSON.stringify(props.config);\n  }\n  return (\n    /*html*/\n    `\n    <style>\n      :host {\n        display: inline-block;\n        min-width: 300px;\n        min-height: 150px;\n        position: relative;\n      }\n      iframe {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n      }\n      :host(:not([controls])) {\n        pointer-events: none;\n      }\n    </style>\n    <iframe${serializeAttributes(iframeAttrs)}></iframe>\n  `\n  );\n}\nfunction serializeIframeUrl(attrs, props) {\n  var _a;\n  if (!attrs.src) return;\n  const videoMatch = attrs.src.match(MATCH_VIDEO);\n  const channelMatch = attrs.src.match(MATCH_CHANNEL);\n  const params = {\n    parent: (_a = globalThis.location) == null ? void 0 : _a.hostname,\n    // ?controls=true is enabled by default in the iframe\n    controls: attrs.controls === "" ? null : false,\n    autoplay: attrs.autoplay === "" ? null : false,\n    muted: attrs.muted,\n    preload: attrs.preload,\n    ...props.config\n  };\n  if (videoMatch) {\n    const videoId = videoMatch[1];\n    return `${EMBED_BASE}/?video=v${videoId}&${serialize(params)}`;\n  } else if (channelMatch) {\n    const channel = channelMatch[1];\n    return `${EMBED_BASE}/?channel=${channel}&${serialize(params)}`;\n  }\n  return "";\n}\nclass TwitchVideoElement extends (globalThis.HTMLElement ?? class {\n}) {\n  static getTemplateHTML = getTemplateHTML;\n  static shadowRootOptions = { mode: "open" };\n  static observedAttributes = ["autoplay", "controls", "loop", "muted", "playsinline", "preload", "src"];\n  loadComplete = new PublicPromise();\n  #loadRequested;\n  #hasLoaded;\n  #iframe;\n  #playerState = {};\n  #currentTime = 0;\n  #muted = false;\n  #volume = 1;\n  #paused = !this.autoplay;\n  #seeking = false;\n  #readyState = 0;\n  #config = null;\n  constructor() {\n    super();\n    this.#upgradeProperty("config");\n  }\n  get config() {\n    return this.#config;\n  }\n  set config(value) {\n    this.#config = value;\n  }\n  async load() {\n    if (this.#loadRequested) return;\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: "open" });\n    }\n    const isFirstLoad = !this.#hasLoaded;\n    if (this.#hasLoaded) {\n      this.loadComplete = new PublicPromise();\n    }\n    this.#hasLoaded = true;\n    await (this.#loadRequested = Promise.resolve());\n    this.#loadRequested = null;\n    this.#readyState = 0;\n    this.dispatchEvent(new Event("emptied"));\n    if (!this.src) {\n      this.shadowRoot.innerHTML = "";\n      globalThis.removeEventListener("message", this.#onMessage);\n      return;\n    }\n    this.dispatchEvent(new Event("loadstart"));\n    let iframe = this.shadowRoot.querySelector("iframe");\n    const attrs = namedNodeMapToObject(this.attributes);\n    if (isFirstLoad && iframe) {\n      this.#config = JSON.parse(iframe.getAttribute("data-config") || "{}");\n    }\n    if (!(iframe == null ? void 0 : iframe.src) || iframe.src !== serializeIframeUrl(attrs, this)) {\n      this.shadowRoot.innerHTML = getTemplateHTML(attrs, this);\n      iframe = this.shadowRoot.querySelector("iframe");\n    }\n    this.#iframe = iframe;\n    globalThis.addEventListener("message", this.#onMessage);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    switch (attrName) {\n      case "src":\n      case "controls": {\n        this.load();\n        break;\n      }\n    }\n  }\n  get src() {\n    return this.getAttribute("src");\n  }\n  set src(value) {\n    this.setAttribute("src", value);\n  }\n  get readyState() {\n    return this.#readyState;\n  }\n  get seeking() {\n    return this.#seeking;\n  }\n  get buffered() {\n    var _a, _b;\n    return createTimeRanges(0, ((_b = (_a = this.#playerState.stats) == null ? void 0 : _a.videoStats) == null ? void 0 : _b.bufferSize) ?? 0);\n  }\n  get paused() {\n    if (!this.#playerState.playback) return this.#paused;\n    return this.#playerState.playback === PlaybackState.IDLE;\n  }\n  get ended() {\n    if (!this.#playerState.playback) return false;\n    return this.#playerState.playback === PlaybackState.ENDED;\n  }\n  get duration() {\n    return this.#playerState.duration ?? NaN;\n  }\n  get autoplay() {\n    return this.hasAttribute("autoplay");\n  }\n  set autoplay(val) {\n    if (this.autoplay == val) return;\n    this.toggleAttribute("autoplay", Boolean(val));\n  }\n  get controls() {\n    return this.hasAttribute("controls");\n  }\n  set controls(val) {\n    if (this.controls == val) return;\n    this.toggleAttribute("controls", Boolean(val));\n  }\n  get currentTime() {\n    if (!this.#playerState.currentTime) return this.#currentTime;\n    return this.#playerState.currentTime;\n  }\n  set currentTime(val) {\n    this.#currentTime = val;\n    this.loadComplete.then(() => {\n      this.#sendCommand(PlayerCommands.SEEK, val);\n    });\n  }\n  get defaultMuted() {\n    return this.hasAttribute("muted");\n  }\n  set defaultMuted(val) {\n    this.toggleAttribute("muted", Boolean(val));\n  }\n  get loop() {\n    return this.hasAttribute("loop");\n  }\n  set loop(val) {\n    this.toggleAttribute("loop", Boolean(val));\n  }\n  get muted() {\n    return this.#muted;\n  }\n  set muted(val) {\n    this.#muted = val;\n    this.loadComplete.then(() => {\n      this.#sendCommand(PlayerCommands.SET_MUTED, val);\n    });\n  }\n  get volume() {\n    return this.#volume;\n  }\n  set volume(val) {\n    this.#volume = val;\n    this.loadComplete.then(() => {\n      this.#sendCommand(PlayerCommands.SET_VOLUME, val);\n    });\n  }\n  get playsInline() {\n    return this.hasAttribute("playsinline");\n  }\n  set playsInline(val) {\n    this.toggleAttribute("playsinline", Boolean(val));\n  }\n  play() {\n    this.#paused = false;\n    this.#sendCommand(PlayerCommands.PLAY);\n  }\n  pause() {\n    this.#paused = true;\n    this.#sendCommand(PlayerCommands.PAUSE);\n  }\n  #onMessage = async (event) => {\n    var _a, _b, _c, _d;\n    if (!this.#iframe.contentWindow) return;\n    const { data, source } = event;\n    const isFromEmbedWindow = source === this.#iframe.contentWindow;\n    if (!isFromEmbedWindow) return;\n    if (data.namespace === "twitch-embed") {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n      if (data.eventName === "ready") {\n        this.dispatchEvent(new Event("loadcomplete"));\n        this.loadComplete.resolve();\n        this.#readyState = 1;\n        this.dispatchEvent(new Event("loadedmetadata"));\n      } else if (data.eventName === "seek") {\n        this.#seeking = true;\n        this.dispatchEvent(new Event("seeking"));\n      } else if (data.eventName === "playing") {\n        if (this.#seeking) {\n          this.#seeking = false;\n          this.dispatchEvent(new Event("seeked"));\n        }\n        this.#readyState = 3;\n        this.dispatchEvent(new Event("playing"));\n      } else {\n        this.dispatchEvent(new Event(data.eventName));\n      }\n    } else if (data.namespace === "twitch-embed-player-proxy" && data.eventName === "UPDATE_STATE") {\n      const oldDuration = this.#playerState.duration;\n      const oldCurrentTime = this.#playerState.currentTime;\n      const oldVolume = this.#playerState.volume;\n      const oldMuted = this.#playerState.muted;\n      const oldBuffered = (_b = (_a = this.#playerState.stats) == null ? void 0 : _a.videoStats) == null ? void 0 : _b.bufferSize;\n      this.#playerState = { ...this.#playerState, ...data.params };\n      if (oldDuration !== this.#playerState.duration) {\n        this.dispatchEvent(new Event("durationchange"));\n      }\n      if (oldCurrentTime !== this.#playerState.currentTime) {\n        this.dispatchEvent(new Event("timeupdate"));\n      }\n      if (oldVolume !== this.#playerState.volume || oldMuted !== this.#playerState.muted) {\n        this.dispatchEvent(new Event("volumechange"));\n      }\n      if (oldBuffered !== ((_d = (_c = this.#playerState.stats) == null ? void 0 : _c.videoStats) == null ? void 0 : _d.bufferSize)) {\n        this.dispatchEvent(new Event("progress"));\n      }\n    }\n  };\n  #sendCommand(command, params) {\n    if (!this.#iframe.contentWindow) return;\n    const message = {\n      eventName: command,\n      params,\n      namespace: "twitch-embed-player-proxy"\n    };\n    this.#iframe.contentWindow.postMessage(message, EMBED_BASE);\n  }\n  // This is a pattern to update property values that are set before\n  // the custom element is upgraded.\n  // https://web.dev/custom-elements-best-practices/#make-properties-lazy\n  #upgradeProperty(prop) {\n    if (Object.prototype.hasOwnProperty.call(this, prop)) {\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n}\nfunction namedNodeMapToObject(namedNodeMap) {\n  let obj = {};\n  for (let attr of namedNodeMap) {\n    obj[attr.name] = attr.value;\n  }\n  return obj;\n}\nfunction serializeAttributes(attrs) {\n  let html = "";\n  for (const key in attrs) {\n    const value = attrs[key];\n    if (value === "") html += ` ${escapeHtml(key)}`;\n    else html += ` ${escapeHtml(key)}="${escapeHtml(`${value}`)}"`;\n  }\n  return html;\n}\nfunction escapeHtml(str) {\n  return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/\'/g, "&apos;").replace(/`/g, "&#x60;");\n}\nfunction serialize(props) {\n  return String(new URLSearchParams(filterParams(props)));\n}\nfunction filterParams(props) {\n  let p = {};\n  for (let key in props) {\n    let val = props[key];\n    if (val === true || val === "") p[key] = true;\n    else if (val === false) p[key] = false;\n    else if (val != null) p[key] = val;\n  }\n  return p;\n}\nclass PublicPromise extends Promise {\n  constructor(executor = () => {\n  }) {\n    let res, rej;\n    super((resolve, reject) => {\n      executor(resolve, reject);\n      res = resolve;\n      rej = reject;\n    });\n    this.resolve = res;\n    this.reject = rej;\n  }\n}\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start == null || end == null || start === 0 && end === 0) {\n    return createTimeRangesObj([[0, 0]]);\n  }\n  return createTimeRangesObj([[start, end]]);\n}\nfunction createTimeRangesObj(ranges) {\n  Object.defineProperties(ranges, {\n    start: {\n      value: (i) => ranges[i][0]\n    },\n    end: {\n      value: (i) => ranges[i][1]\n    }\n  });\n  return ranges;\n}\nif (globalThis.customElements && !globalThis.customElements.get("twitch-video")) {\n  globalThis.customElements.define("twitch-video", TwitchVideoElement);\n}\nvar twitch_video_element_default = TwitchVideoElement;\n\n\n\n//# sourceURL=webpack://anime/./node_modules/twitch-video-element/dist/twitch-video-element.js?\n}')}}]);